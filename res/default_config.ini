[USER] 
# devID represents the name of the device. 
# It is used for saving the data aswell as naming the data files
devID = $ID

last_updated = $LAST_UPDATED

# LED can be used to turn off LEDs. This can help saving some power and can solve some
# hardware issue with LEDs permissions occurring on some devices. It is suggested that
# leds are kept on in case of offline use because checking operating status will become
# difficult otherwise.
led = $LED

# This define the time in seconds for a single scan. This setting must be set with caution
# since it affects the whole software. Longer scan time will reduce the data available for
# beacons but can be usesul for counting. If long scan times are used a long delta time
# is also suggested.
scantime = $SCANTIME

# Define the location of this device. If one is given, it will be put inside the csv files.
#
# Format is ID: [latitude], [longitude] to enable, or 0 to disable.
location = $LOCATION


##########
#
# Counting functionality config
#
#########
[COUNTING] 


# The threshold below which devices will be completely ignore
# The RSSI-value is defined to be greater than -100.
# If not specified, devices are not filtered in any way
#
# (optional, default = -100)
rssi_threshold = $RSSI_THRESHOLD

# Define Threshold above which devices will be seen as "close".
# If not set, it will be equal to the rssi_threshold value
#
# (optional, default = -80)
rssi_close_threshold = $RSSI_CLOSE_THRESHOLD

# Define the timestep that should be used for saving, scanning, and sending data.
#
# It is strongly advised to set this value to full multiples of 10, 15 or 20 seconds,
# otherwise saving time may become irregular. Too long timesteps may affect results
# since device ID of Bluetooth devices may change during scanning.
#
# (optional, default = 10)
delta = $DELTA_COUNTING

# Used in the calculation of static devices that constantly appears in scans.
# If a specific device appears more than ratio * scans it is counted as static.
# Note that an approximation is done when computing ratio * scans,
# so actual numbers may slighly vary depending on the number of scans and the ratio value.
#
# (optional, default = 0.7)
static_ratio = $STATIC_RATIO


# define what storages should be used when storing the counting data.
# They are used for both _rssi.csv and _summary.csv
# 
# (optional)
# usable values are all keys that have a defined path in the section [STORAGE PATHS]
# e. g. 
#  beacon                   ; do not use this feature
#  beacon = sd              ; only save beacon data to the sd path
#  beacon = usb, usb_backup ; save beacon data to two usb locations
storage = sd, usb


# Define if remote data transfer should happen.
# This url is relative to counting data and different from transit data.
# If set to 1, the url needs to be specified as well
#
# (optional)
internet_for_counting = $INTERNET_COUNTING
url = $URL_COUNTING


[ZIGBEE]

use_zigbee = $USE_ZIGBEE

# define the port of the zigbee device.
# If set to 'auto' it will try to automatically detect it. Fallback is /dev/ttyUSB0
port = auto
baud_rate = 9600

my_label = $ID
is_coordinator = $ZIGBEE_COORDINATOR
internet_nodes = $ZIGBEE_INTERNET
pan = $PAN


#########
#
# Beacon functionality config
#
#########
[BEACON]

# Specify the ID that the beacons use.
# This is the given UUID that can be set up.
#
# (optional)
target_id = $TARGET_ID

# Specify the amount of scans that should be kept in memory
# i.e. the time in seconds of the past to use for calculation
#
# (optional, default=8)
scans = $SCANS

# Specify the threshold above which a beacon is counted as "present" in the area
# i.e. for value T and scans N if a beacon is more than T/N scans detected,
# it is counted and the time spent in the area is being tracked
#
# (optional, default = 3)
threshold = $BEACON_THRESHOLD

# define what storages should be used when storing the beacon data
# 
# (optional)
# usable values are all keys that have a defined path in the section [STORAGE PATHS]
# e. g. 
#  storage = sd              ; only save beacon data to the sd path
#  storage = usb, usb_backup ; save beacon data to two usb locations
storage = sd, usb

#########
#
# Transit time functionality config
#
#########
[TRANSIT]

# Specify the time interval in which ids should be sent to the backend.
# This can be any number but update at the backend occurs every 60 s, so,
# values between 5 and 30 s are suggested.
#
# (optional, default=5)
delta = $DELTA_TRANSIT

# Specify the url where ids should be sent to compute transit time,
# important: this url is different from the one used for counts
# If set to 1, the url needs to be specified as well
#
# (optional)
transit_enabled = $TRANSIT_ENABLED
url = $URL_TRANSIT


# In this section the paths for storages are defined.
# The format are simple key-value pairs, the keys are then used in 
# the storage section above
[STORAGE PATHS]

# location to store the data on the sd card (home directory is on sd card on raspi)
sd = /home/blescan/ble_data

# define usb location
usb = /media/usb0/ble_data

# this list can be extended however you like
#
# usb_backup = /media/usb1/data
# sd_2 = ...
# ...